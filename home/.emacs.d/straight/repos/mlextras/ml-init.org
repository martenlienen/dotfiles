#+title: init.el
#+property: header-args :tangle yes :results silent
#+startup: overview

My emacs config is a package so that straight precompiles it.

#+BEGIN_SRC emacs-lisp
  ;;; ml-init.el --- My config as a package  -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;;; Code:

#+END_SRC

* Globals
#+BEGIN_SRC emacs-lisp
  ;; In some X/WM configurations (e.g. xpra with i3) emacs only fills its assigned frame to
  ;; a multiple of the character width/height, leaving an ugly black border. This ensures
  ;; that all frames always fill their space pixel perfect.
  (setq frame-resize-pixelwise t)

  (setf ring-bell-function 'ignore)

  (setq-default cursor-type 'bar)

  ;; Configure the *scratch* buffer
  (setf initial-scratch-message ""
        initial-major-mode #'emacs-lisp-mode)

  ;; Enable X clipboards
  (setf select-enable-clipboard t
        select-enable-primary t)

  ;; Put more information into the frame title
  (setf frame-title-format '("" invocation-name ": %b - " mode-name))

  ;; Enable all commands
  (mapatoms (lambda (s) (when (get s 'disabled) (put s 'disabled nil))))

  ;; Show column numbers
  (column-number-mode t)

  ;; y and n instead of yes and no
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Create new files and buffers without confirmation
  (setq confirm-nonexistent-file-or-buffer nil)
  (setq ido-create-new-buffer 'always)

  ;; Read 1M at a time from processes. Important for LSP performance.
  (setq read-process-output-max (* 1024 1024))

  ;; Indent with 2 spaces
  (setq-default indent-tabs-mode nil
                tab-width 2
                js-indent-level 2
                css-indent-offset 2
                sh-indentation 2
                web-mode-markup-indent-offset 2
                web-mode-code-indent-offset 2
                web-mode-css-indent-offset 2
                web-mode-attr-indent-offset 2)

  ;; Store a few MB of undo history in each buffer
  (setq undo-limit (* 64 1024 1024)
        undo-strong-limit (* 128 1024 1024)
        undo-outer-limit (* 512 1024 1024))

  ;; Line breaks at 90 characters
  (setq-default fill-column 90)

  ;; I don't like the GNU style of two spaces after a period
  (setq-default sentence-end-double-space nil)

  ;; Append a newline at the end of files
  (setq require-final-newline t)

  ;; Disable backups, lock files and autosaves
  (setq backup-inhibited t
        create-lockfiles nil
        auto-save-default nil)

  ;; Yank at point instead of position of cursor
  (setf mouse-yank-at-point t)

  ;; Never re-center during scrolling and keep some distance between point and the window
  ;; margin
  (setq scroll-conservatively 101
        scroll-margin 3)

  ;; I do not like accidentally freezing my emacs instance
  (global-set-key (kbd "C-z") nil)

  ;; Disable GC while the minibuffer is active (taken from doom)
  (defun ml-defer-garbage-collection-h ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun ml-restore-garbage-collection-h ()
    ;; Defer it so that commands launched immediately after will enjoy the
    ;; benefits.
    (run-at-time 1 nil #'ml-restore-gc-threshold))

  (add-hook 'minibuffer-setup-hook #'ml-defer-garbage-collection-h)
  (add-hook 'minibuffer-exit-hook #'ml-restore-garbage-collection-h)

  ;; Enable convenient editing of symmetrically encrypted files
  (setq epa-file-cache-passphrase-for-symmetric-encryption t
        epa-pinentry-mode 'loopback)

  ;; Improve buffer switching defaults as recommended by Mickey Petersen [1]
  ;;
  ;; [1] https://www.masteringemacs.org/article/demystifying-emacs-window-manager
  (setq switch-to-buffer-in-dedicated-window 'pop
        switch-to-buffer-obey-display-actions t)

  (setq display-buffer-alist
        '(("\\*Warnings\\*" (display-buffer-no-window) (allow-no-window . t))
          ((or "^\\*Help\\*$" "^\\*helpful")
           (display-buffer-reuse-mode-window display-buffer-in-side-window)
           (side . right)
           (window-width . 80))
          ((or "^\\*Tex errors\\*$")
           (display-buffer-reuse-mode-window display-buffer-in-side-window)
           (side . bottom))
          ((or (major-mode . magit-process-mode)
               (major-mode . magit-revision-mode)
               (major-mode . magit-diff-mode)
               (major-mode . magit-stash-mode))
           (display-buffer-pop-up-window)
           (inhibit-same-window . t)))

        ;; Display buffers in the selected window by default
        display-buffer-base-action
        '((display-buffer-reuse-window
           display-buffer-same-window)))

  ;; Enable S-SPC keybindings in pgtk emacs
  (setq pgtk-use-im-context-on-new-connection nil)
#+END_SRC

Automatically jump to origin file and line when an the point is on an error.

#+BEGIN_SRC emacs-lisp
  (add-hook 'compilation-mode-hook #'next-error-follow-minor-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Start a server for emacsclient
  ;; (require 'server)
  ;; (unless (server-running-p)
  ;;   (server-start))
#+END_SRC

* Packages

Packages are configured with the ~use-package~ macro.

#+BEGIN_SRC emacs-lisp
  (require 'bind-key)
  (use-package use-package-chords
    :config (key-chord-mode t)
    :straight t)

  (use-package hydra :straight t)

  (use-package pretty-hydra :straight t)
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :straight t
    :config
    (solaire-global-mode t))

  (use-package doom-themes
    :straight t
    :if (display-graphic-p))

  (use-package doom-modeline
    :straight t
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-buffer-modification-icon nil)
    (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
    (doom-modeline-def-modeline 'ml-line
      '(bar window-number matches follow buffer-info buffer-position selection-info)
      '(compilation misc-info repl lsp minor-modes input-method process vcs))
    (defun ml-setup-doom-modeline ()
      (doom-modeline-set-modeline 'ml-line 'default))
    (add-hook 'doom-modeline-mode-hook 'ml-setup-doom-modeline))

  (use-package circadian
    :straight t
    :ensure t
    :config
    (setq circadian-themes '(("8:00" . doom-tomorrow-day)
                             ("20:00" . doom-tomorrow-night)))
    (circadian-setup))

  (use-package nord-theme
    :straight t
    :if (not (display-graphic-p))
    :config (load-theme 'nord t))

  (with-eval-after-load 'all-the-icons
    (with-eval-after-load 'nerd-icons
      (defun ml/install-fonts ()
        "Install fonts provided by various packages."
        (interactive)
        (call-interactively #'all-the-icons-install-fonts)
        (call-interactively #'nerd-icons-install-fonts))))
#+END_SRC

** Display

#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :straight t
    :custom
    (visual-fill-column-enable-sensible-window-split t)
    :config
    (add-hook 'visual-line-mode-hook #'visual-fill-column-mode))
#+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp
  (use-package fontaine
    :straight t
    :ensure t
    :hook
    ((after-init . fontaine-mode)
     (after-init . ml/fontaine-regular-preset))
    ;; :bind (("C-c f" . fontaine-set-preset)
    ;;        ("C-c F" . fontaine-toggle-preset))
    :init
    (defun ml/fontaine-regular-preset ()
      "Load the `regular' font preset."
      (fontaine-set-preset 'regular))
    :custom
    (text-scale-remap-header-line t)
    (fontaine-presets
     '((regular) ; Assign the name "regular" to the defaults
       (small
        :default-height 90)
       (large
        :inherit medium
        :default-height 150)
       (presentation
        :inherit regular
        :default-height 180)
       (t

        ;; Got Fira Coda on codingfont.com as my favorite coding font via an anonymous 1v1 tournament
        :default-family "Fira Code"
        :fixed-pitch-family "Fira Code"

        ;; I just like this one
        :variable-pitch-family "Libertinus Serif"

        ;; Font size in tenths of a point
        :default-height 120

        :line-spacing nil)))
    :config
    (with-eval-after-load 'beacon
      (add-hook 'fontaine-set-preset-hook #'beacon-blink)))
#+END_SRC

** Ligatures

#+BEGIN_SRC emacs-lisp
  (use-package ligature
    :straight t
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                         ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                         "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                         "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                                         "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                         "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                         "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                         "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                         "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                         "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+END_SRC

** Minibuffer

Save the minibuffer history.

#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :straight t
    :config
    (setf history-length 500)
    (savehist-mode))
#+END_SRC

Close the minibuffer when it loses focus.

#+BEGIN_SRC emacs-lisp
  (defun kill-unfocused-minibuffer (_frame)
    "Kill the minibuffer if it is active but does not have focus."
    (when (and
           (>= (recursion-depth) 1)
           (active-minibuffer-window)
           (not (minibuffer-window-active-p (selected-window))))
      (abort-recursive-edit)))

  (add-hook 'window-selection-change-functions 'kill-unfocused-minibuffer)
#+END_SRC

** eldoc

#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    ;; Set the commands obarray size to some prime large enough to hold all commands that we
    ;; register below
    :init (setq eldoc-message-commands-table-size 293)
    :custom ((eldoc-idle-delay 0.2))
    :config
    ;; Apparently, eldoc is loaded even before early-init.el?! Therefore, the obarray
    ;; setting above never has an effect and resize the obarray here manually.
    (let ((old-commands eldoc-message-commands))
      (setq eldoc-message-commands (make-vector eldoc-message-commands-table-size 0))
      (cl-loop for sym being the symbols of old-commands
               do (eldoc-add-command sym)))

    ;; Register additional movement commands that should trigger eldoc
    (with-eval-after-load 'smartparens (eldoc-add-command-completions "sp-"))
    (with-eval-after-load 'avy (eldoc-add-command-completions "avy-"))
    (with-eval-after-load 'smartscan (eldoc-add-command-completions "smartscan-")))
#+END_SRC

** Better Help

Displays all key bindings of the current major mode with one-line descriptions
in a condensed format.

#+BEGIN_SRC emacs-lisp
  (use-package discover-my-major
    :straight t
    :bind ("C-h C-m" . discover-my-major))
#+END_SRC

~helpful~ puts a lot of extra funcionality on help pages such as the source code
of functions.

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :straight t
    :bind (("C-h a" . helpful-command)
           ("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           :map emacs-lisp-mode-map
           ("C-c C-d" . helpful-at-point)))
#+END_SRC

** Buffer Switching

#+BEGIN_SRC emacs-lisp
  (defun iflipb-kill-this-buffer ()
    "Same as `kill-buffer' but keep the iflipb buffer list state."
    (interactive)
    (kill-buffer (current-buffer))
    (if (iflipb-first-iflipb-buffer-switch-command)
        (setq last-command 'kill-buffer)
      (if (< iflipb-current-buffer-index (length (iflipb-interesting-buffers)))
          (iflipb-select-buffer iflipb-current-buffer-index)
        (iflipb-select-buffer (1- iflipb-current-buffer-index)))
      (setq last-command 'iflipb-kill-buffer)))

  (defun ml-iflipb-ignore-special-except-some (bufname)
    "Check if BUFNAME is a special buffer except for some special cases."
    (or (and (string-prefix-p "*" bufname)
             (not (string-prefix-p "*Org Src" bufname))
             (not (string-prefix-p "*deadgrep" bufname))
             (not (string-prefix-p "*ielm" bufname))
             (not (string-prefix-p "*Chat" bufname)))
        (string-match-p "^magit\\(-[^:]+\\)?:" bufname)))

  (use-package iflipb
    :straight t
    :demand t
    :bind (("<f6>" . iflipb-next-buffer)
           ("S-<f6>" . iflipb-previous-buffer)
           ("M-<f6>" . iflipb-kill-this-buffer))
    :custom ((iflipb-ignore-buffers #'ml-iflipb-ignore-special-except-some)
             (iflipb-current-buffer-template "[%.15s]")
             (iflipb-other-buffer-template "%.15s")))
#+END_SRC

** Searching & Selection

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight (vertico :files ("*" "extensions/*" (:exclude ".git"))
                       :includes (vertico-buffer
                                  vertico-directory
                                  vertico-flat
                                  vertico-indexed
                                  vertico-mouse
                                  vertico-quick
                                  vertico-repeat
                                  vertico-reverse
                                  vertico-multiform))
    :custom (vertico-cycle t)
    :config
    (vertico-mode)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  (use-package vertico-repeat
    :straight nil
    :after vertico
    :bind ("C-c o" . vertico-repeat)
    :config
    (add-hook 'minibuffer-setup-hook #'vertico-repeat-save))

  (use-package vertico-multiform
    :straight nil
    :after vertico
    :custom ((vertico-multiform-commands '((consult-buffer flat)))
             (vertico-multiform-categories '((file flat)
                                             (buffer flat)
                                             (consult-location)
                                             (t reverse))))
    :config (vertico-multiform-mode t))

  (defun ml/orderless-flex-if-twiddle (pattern _index _total)
    "Match PATTERN with flex matching if it starts with a twiddle."
    (when (string-prefix-p "~" pattern)
      `(orderless-flex . ,(substring pattern 1))))

  (defun ml/orderless-without-if-bang (pattern _index _total)
    "Negate a PATTERN if it starts with a bang."
    (cond
     ((equal "!" pattern)
      '(orderless-literal . ""))
     ((string-prefix-p "!" pattern)
      `(orderless-without-literal . ,(substring pattern 1)))))

  (use-package orderless
    :straight t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))
    (orderless-matching-styles '(orderless-literal orderless-regexp))
    (orderless-style-dispatchers '(ml/orderless-flex-if-twiddle ml/orderless-without-if-bang)))

  (use-package marginalia
    :straight t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :config (marginalia-mode))

  (use-package consult
    :straight t
    :after hydra
    :custom
    (consult-narrow-key "<")
    (register-preview-delay 0)
    (register-preview-function #'consult-register-format)
    ;; Use consult to select xref locations with preview
    (xref-show-definitions-function #'consult-xref)
    :bind (("C-s" . consult-line)
           ("C-S-s" . isearch-forward)
           ("C-c s" . consult-ripgrep)
           ("C-x f" . find-file)
           ("M-y" . consult-yank-pop)
           ("C-x b" . consult-buffer)
           ("C-x 4 b" . consult-buffer-other-window)
           ("C-x 5 b" . consult-buffer-other-frame)
           ("C-x M-:" . consult-complex-command)

           ;; Isearch integration
           :map isearch-mode-map
           ("M-s l" . consult-line))

    :init
    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window))

  (use-package which-key :straight t)

  (use-package embark
    :straight t
    :bind ("M-o" . embark-act)
    :config
    (require 'which-key)
    (setq embark-action-indicator
          (lambda (map _target)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator)

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :straight t
    :after (embark consult)
    :hook (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

** File search with rg

#+BEGIN_SRC emacs-lisp
  (use-package deadgrep
    :straight t
    :bind (("<f9>" . deadgrep)
           ("S-<f9>" . ml-deadgrep-here)
           :map deadgrep-mode-map
           ("s" . deadgrep-search-term)
           ("d" . deadgrep-directory)
           ("a" . ml-deadgrep-file-type-all)
           ("t" . ml-deadgrep-file-type-type)
           ("S-g" . ml-deadgrep-file-type-glob))
    :custom ((deadgrep-extra-arguments '("--no-config" "--hidden" "--glob=!.git/")))
    :config
    (defun ml-deadgrep-file-type (type)
      "Set the file type to TYPE."
      (let ((button (make-button 0 0 :type 'deadgrep-file-type 'file-type type)))
        (deadgrep--file-type button)))

    (defun ml-deadgrep-file-type-all ()
      "Search all file types in deadgrep."
      (interactive)
      (ml-deadgrep-file-type 'all))

    (defun ml-deadgrep-file-type-type ()
      "Search certain file types in deadgrep."
      (interactive)
      (ml-deadgrep-file-type 'type))

    (defun ml-deadgrep-file-type-glob ()
      "Select file types by glob in deadgrep."
      (interactive)
      (ml-deadgrep-file-type 'glob))

    (defun ml-deadgrep-here ()
      "Run a deadgrep search in the current buffer's directory."
      (interactive)
      (let* ((root default-directory)
             (deadgrep-project-root-function (lambda () root)))
        (call-interactively #'deadgrep))))
#+END_SRC

** Highlighting

*** Cursor

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :straight t
    :config
    (beacon-mode))
#+END_SRC

*** Delimiter

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

    (setf rainbow-delimiters-max-face-count 6))
#+END_SRC

*** Symbols

#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :straight t
    :config
    (add-hook 'prog-mode-hook 'highlight-symbol-mode)

    (setf highlight-symbol-idle-delay 0))
#+END_SRC

** Window Management

#+BEGIN_SRC emacs-lisp
  (use-package popper
    :demand t
    :straight t
    :bind (("<f12>" . popper-toggle)
           ("S-<f12>" . popper-cycle)
           ("M-S-<f12>" . popper-cycle-backwards)
           ("M-<f12>" . popper-kill-latest-popup))
    :custom ((popper-reference-buffers '("\\*ielm\\*$"
                                         "\\*lsp-help\\*$"
                                         "^\\*helpful"
                                         "^\\*Help\\*$"))
             (popper-group-function nil)
             (popper-display-control nil))
    :config
    (popper-mode)
    (popper-echo-mode))

  (use-package ace-window
    :straight t
    :bind ("M-i" . ace-window))
#+END_SRC

*** Perspectives

#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :straight t
    :demand t
    :custom ((persp-mode-prefix-key (kbd "C-c p"))
             (persp-state-default-file (concat user-emacs-directory "perspective-state")))
    :hook ((kill-emacs . persp-state-save))
    :config
    (persp-mode))
#+END_SRC

** Buffer Management

#+BEGIN_SRC emacs-lisp
  (defun ml/kill-this-buffer ()
    "Kill the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))

  (bind-keys ("C-x k" . ml/kill-this-buffer)
             ("C-x C-k" . kill-buffer))

  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer))

  (use-package uniquify
    :config (setf uniquify-buffer-name-style 'forward
                  uniquify-strip-common-suffix t))
#+END_SRC

** File Management

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :config
    (setf dired-listing-switches "-lahv")

    (bind-key "M-w" #'wdired-change-to-wdired-mode dired-mode-map))
#+END_SRC

~dired-jump~ from ~dired-x~ is probably my most used ~dired~ command.

#+BEGIN_SRC emacs-lisp
  (use-package dired-x)
#+END_SRC

** Project Management

#+BEGIN_SRC emacs-lisp
  (use-package project
    :bind (("C-x C-f" . project-find-file)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun ml-treemacs-dwim ()
    "Toggle treemacs."
    (interactive)
    (if (and (eq (treemacs-current-visibility) 'visible)
             treemacs--in-this-buffer)
        (delete-window (treemacs-get-local-window))
      (call-interactively #'treemacs-select-window)))

  (use-package treemacs
    :straight t
    :commands (treemacs-current-visibility)
    :bind (("<f8>" . ml-treemacs-dwim)
           ("S-<f8>" . treemacs)
           ("<mouse-1>" . treemacs-single-click-expand-action))
    :custom ((treemacs-width 30)
             (treemacs-indentation 1))
    :config
    ;; Hide gitignored files via the toggle call instead of customizing the variable because
    ;; we need the interactive behavior that happens in the toggle call to actually hide the
    ;; files.
    (treemacs-hide-gitignored-files-mode t))

  (use-package treemacs-nerd-icons
    :straight t
    :defer t
    :after treemacs
    :init (require 'treemacs-nerd-icons)
    :config (treemacs-load-theme "nerd-icons"))

  (use-package treemacs-perspective
    :straight t
    :after (treemacs perspective)
    :config (treemacs-set-scope-type 'Perspectives))
#+END_SRC

* Tramp

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :init
    (setq tramp-default-method "ssh"
          tramp-terminal-type "tramp"
          tramp-connection-timeout 10
          tramp-ssh-controlmaster-options
          "-o ControlMaster=auto -o ControlPath='~/.ssh/tramp.%%C' -o ControlPersist=5m"))
#+END_SRC

* Utilities

The ~ml~ package (conspicuously named after myself) contains a loose collection of
utility functions and commands which is why it cannot be put easily into one of the
existing sections.

#+BEGIN_SRC emacs-lisp
  (defun ml-insert-random-seed ()
    "Insert a random 64-bit integer at point (32-bit with prefix arg)."
    (interactive)
    (let ((seed (random (ash 1 (if current-prefix-arg 32 64)))))
      (insert (format "%d" seed))))

  (use-package mlutils
    :straight (ml :local-repo "mlextras" :type nil)
    :bind (("C-a" . ml-go-to-beginning-of-line-dwim)
           ("M-D" . ml-duplicate-text)
           ("C-S-k" . ml-kill-line)
           ("C-o" . ml-open-line)
           ("C-S-o" . ml-open-line-above)
           ("C-S-p" . ml-move-text-up)
           ("C-S-n" . ml-move-text-down)
           ("C-c 0" . ml-insert-random-seed))
    :config
    ;; For some reason, M-S-d sends C-M-_ ? in wezterm, so just add a duplicate binding
    (let ((keymap (make-sparse-keymap)))
      (define-key keymap (kbd "?") #'ml-duplicate-text)
      (define-key global-map (kbd "C-M-_") keymap)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package tmp-buffer
    :straight (tmp-buffer :local-repo "mlextras" :type nil)
    :bind ("C-c n" . tmp-buffer))

  (use-package window-extras
    :straight (window-extras :local-repo "mlextras" :type nil)
    :bind (("C-c w t" . transpose-windows)
           ("C-c w v" . toggle-window-split)))
#+END_SRC

** PATH

Teach emacs my modified ~PATH~ so that it can, for example, find local python
installations. We have to set ~exec-path-from-shell-arguments~ to ~""~ so that
it uses an interactive shell instead of a login one which would not read my
~.zshenv~ file, where ~PATH~ is initialized.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :custom (exec-path-from-shell-arguments "")
    :config (exec-path-from-shell-initialize))
#+END_SRC

** direnv

Load direnv environment for each buffer.

#+BEGIN_SRC emacs-lisp
  (use-package envrc
    :straight t
    :hook (after-init . envrc-global-mode))

  (use-package inheritenv
    :straight t)
#+END_SRC

** Terminal UI

~term-key~ configures emacs and the terminal to communicate arbitrary key combinations, such as C-S-o, via escape codes. Without this, it is not possible to send these key combinations to emacs running in a terminal.

#+BEGIN_SRC emacs-lisp
  (defun ml/want-key-p (key mods)
    "Predicate for which keys should be encoded by term-keys."
    (seq-let (shift control meta super hyper alt) mods
      (or
       ;; Any of the defaults
       (and (term-keys/want-key-p-def key mods)
            ;; Minus C-S- keybindings used by wezterm
            (not (and shift control)))
       (and
        ;; We don't care about Super/Hyper/Alt modifiers
        (not super) (not hyper) (not alt)

        (or
         ;; F keys + at least one modifier
         (and (string-match-p "^F[0-9]\\{1,2\\}$" key) (or shift control meta))

         ;; C-M- combinations with letters
         (and control meta (string-match-p "^[a-zA-Z]$" key))

         ;; Re-add some C-S- bindings I use in emacs
         (and control shift (string-match-p "^[oknps]$" key))

         ;; Add my text duplication binding
         (and meta shift (string-equal key "d"))

         ;; Space bar + at least one modifier
         (and (string-equal key "space") (or control meta)))))))

  (defun ml/generate-alacritty-term-keys ()
    "Generate the alacritty term-keys configuration."
    (interactive)
    (require 'term-keys-alacritty)
    (with-temp-buffer
      (insert (term-keys/alacritty-config))
      (write-region (point-min) (point-max) "~/.config/alacritty/term-keys.yml")))

  (use-package term-keys
    :disabled
    :straight (term-keys :repo "CyberShadow/term-keys" :host github)
    :if (not (display-graphic-p))
    :custom ((term-keys/want-key-p-func #'ml/want-key-p))
    :config (term-keys-mode t))
#+END_SRC

* org

Configure org-mode early to ensure that no package loads the built-in version of org-mode
before they install the upstream version.

#+BEGIN_SRC emacs-lisp
  (defun ml/add-face-ancestor (face ancestor)
    "Make FACE inherit from ANCESTOR."
    (let* ((old (face-attribute face :inherit))
           (new (cond ((or (not old) (eq old 'unspecified)) ancestor)
                      ((symbolp old) (list ancestor old))
                      (t (cons ancestor old)))))
      (face-spec-set face `((t . (:inherit ,new))))))

  (use-package org
    ;; org with the development version of org-latex-preview
    :straight `(org
                :fork (:host nil
                       :repo "https://git.tecosaur.net/tec/org-mode.git"
                       :branch "dev"
                       :remote "tecosaur")
                :files (:defaults "etc")
                :build t
                :pre-build
                (with-temp-file "org-version.el"
                 (require 'lisp-mnt)
                 (let ((version
                        (with-temp-buffer
                          (insert-file-contents "lisp/org.el")
                          (lm-header "version")))
                       (git-version
                        (string-trim
                         (with-temp-buffer
                           (call-process "git" nil t nil "rev-parse" "--short" "HEAD")
                           (buffer-string)))))
                  (insert
                   (format "(defun org-release () \"The release version of Org.\" %S)\n" version)
                   (format "(defun org-git-version () \"The truncate git commit hash of Org mode.\" %S)\n" git-version)
                   "(provide 'org-version)\n")))
                :pin nil)
    :custom
    (org-default-notes-file "notes.org")
    (org-crypt-key nil)
    (org-tags-exclude-from-inheritance (list "crypt"))
    (org-M-RET-may-split-line nil)
    (org-enforce-todo-dependencies t)
    (org-enforce-todo-checkbox-dependencies t)
    (org-agenda-start-on-weekday nil)
    (org-reverse-note-order t)

    ;; Edit settings
    (org-catch-invisible-edits 'show-and-error)
    (org-special-ctrl-a/e t)

    ;; Org styling
    (org-pretty-entities t)
    (org-ellipsis "…")

    ;; Only render sub and superscripts with braces
    (org-use-sub-superscripts '{})

    (org-src-fontify-natively t)
    (org-attach-id-dir "attachments")
    (org-babel-load-languages '((emacs-lisp . t)
                                (python . t)
                                (shell . t)))

    (org-startup-with-inline-images t)
    (org-capture-templates
     '(("p" "Project note" entry (file+headline ml/project-notes-file "Journal")
        "* %^{Title} %^{summary}p
  :properties:
  :date: %t
  :end:

  %?" :jump-to-captured t :prepend t)))
    :custom-face
    (org-document-title ((t . (:height 2.0))))
    (org-level-1 ((t . (:height 1.75))))
    (org-level-2 ((t . (:height 1.5))))
    (org-level-3 ((t . (:height 1.33))))
    (org-level-4 ((t . (:height 1.2))))
    (org-level-5 ((t . (:height 1.1))))
    (org-level-6 ((t . (:height 1.0))))
    :hook
    (org-mode . flycheck-mode)
    (org-mode . variable-pitch-mode)
    (before-save . org-update-all-dblocks)
    :bind
    ("C-c c" . org-capture)
    :init
    (defun ml/project-notes-file ()
      "Find the notes file for the current project."
      (message "yolo")
      (if-let* ((project (project-current))
                (root (project-root project)))
          (f-join root "notes.org")))
    :config
    (require 'org-crypt)
    (org-crypt-use-before-save-magic)

    ;; Load language support
    (org-babel-do-load-languages
     'org-babel-load-languages
     org-babel-load-languages)

    ;; Make blocks, code and some other things fixed-pitch with variable-pitch-mode.
    (cl-loop for face in '(org-block org-block-begin-line org-block-end-line org-code
                                     org-document-info-keyword org-meta-line org-table
                                     org-verbatim
                                     ;; For the following ones, it is a matter of taste of
                                     ;; these should be fixed pitch or not
                                     org-link org-property-value org-special-keyword org-tag)
             do (ml/add-face-ancestor face 'fixed-pitch)))

  (use-package org-latex-preview
    :custom
    ;; Block C-n, C-p etc from opening up previews when using auto-mode
    (org-latex-preview-auto-ignored-commands
     '(next-line previous-line mwheel-scroll scroll-up-command scroll-down-command))
    ;; More immediate live-previews -- the default delay is 1 second
    (org-latex-preview-live-debounce 0.2)
    ;; Also preview inline fragments
    (org-latex-preview-live t)
    ;; Render latex previews automatically when opening org files
    (org-startup-with-latex-preview t)
    :hook (org-mode . org-latex-preview-auto-mode)
    :config
    ;; Increase preview width
    (plist-put org-latex-preview-appearance-options :page-width 0.8))

  (use-package org-download
    :straight t
    :after org
    :custom
    (org-download-method 'attach))

  (use-package org-ql
    :straight t
    :after org)
#+END_SRC

Give org a modern look.

#+BEGIN_SRC emacs-lisp
  (use-package org-modern
    :straight t
    :config
    (add-hook 'org-mode-hook 'org-modern-mode))
#+END_SRC

* UI

* Editing

** Better Defaults

The dwim commands should just be the default in modern emacs.
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-u" . upcase-dwim)
             ("M-l" . downcase-dwim)
             ("M-c" . capitalize-dwim))
#+END_SRC

** Multiple Cursors

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :straight t
    :after hydra
    :bind (("C-c m" . hydra-multiple-cursors/body)
           :map mc/keymap
           ;; Make enter insert a newline instead of quitting mc
           ("<return>" . nil))
    :config
    (defhydra hydra-multiple-cursors (:hint nil)
      "
   Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
  ------------------------------------------------------------------
   [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
   [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
   [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
   [Click] Cursor at point       [_q_] Quit"
      ("l" mc/edit-lines :exit t)
      ("a" mc/mark-all-like-this :exit t)
      ("n" mc/mark-next-like-this)
      ("N" mc/skip-to-next-like-this)
      ("M-n" mc/unmark-next-like-this)
      ("p" mc/mark-previous-like-this)
      ("P" mc/skip-to-previous-like-this)
      ("M-p" mc/unmark-previous-like-this)
      ("s" mc/mark-all-in-region-regexp :exit t)
      ("0" mc/insert-numbers :exit t)
      ("A" mc/insert-letters :exit t)
      ("<mouse-1>" mc/add-cursor-on-click)
      ;; Help with click recognition in this hydra
      ("<down-mouse-1>" ignore)
      ("<drag-mouse-1>" ignore)
      ("q" nil)))
#+END_SRC

** SmartParens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :straight t
    :demand t
    :init
    (require 'hydra)
    (defhydra hydra-smartparens (:hint nil)
      "
   Moving^^^^                       Slurp & Barf^^   Wrapping^^            Sexp juggling^^^^               Destructive
  ------------------------------------------------------------------------------------------------------------------------
   [_a_] beginning  [_n_] down      [_h_] bw slurp   [_R_]   rewrap        [_S_] split   [_t_] transpose   [_c_] change inner  [_w_] copy
   [_e_] end        [_N_] bw down   [_H_] bw barf    [_u_]   unwrap        [_s_] splice  [_A_] absorb      [_C_] change outer
   [_f_] forward    [_p_] up        [_l_] slurp      [_U_]   bw unwrap     [_r_] raise   [_E_] emit        [_k_] kill          [_g_] quit
   [_b_] backward   [_P_] bw up     [_L_] barf       [_(__{__[_] wrap (){}[]   [_j_] join    [_o_] convolute   [_K_] bw kill       [_q_] quit"
      ;; Moving
      ("a" sp-beginning-of-sexp)
      ("e" sp-end-of-sexp)
      ("f" sp-forward-sexp)
      ("b" sp-backward-sexp)
      ("n" sp-down-sexp)
      ("N" sp-backward-down-sexp)
      ("p" sp-up-sexp)
      ("P" sp-backward-up-sexp)

      ;; Slurping & barfing
      ("h" sp-backward-slurp-sexp)
      ("H" sp-backward-barf-sexp)
      ("l" sp-forward-slurp-sexp)
      ("L" sp-forward-barf-sexp)

      ;; Wrapping
      ("R" sp-rewrap-sexp)
      ("u" sp-unwrap-sexp)
      ("U" sp-backward-unwrap-sexp)
      ("(" sp-wrap-round)
      ("{" sp-wrap-curly)
      ("[" sp-wrap-square)

      ;; Sexp juggling
      ("S" sp-split-sexp)
      ("s" sp-splice-sexp)
      ("r" sp-raise-sexp)
      ("j" sp-join-sexp)
      ("t" sp-transpose-sexp)
      ("A" sp-absorb-sexp)
      ("E" sp-emit-sexp)
      ("o" sp-convolute-sexp)

      ;; Destructive editing
      ("c" sp-change-inner :exit t)
      ("C" sp-change-enclosing :exit t)
      ("k" sp-kill-sexp)
      ("K" sp-backward-kill-sexp)
      ("w" sp-copy-sexp)

      ("q" nil)
      ("g" nil))
    :config
    ;; Smartparens defines this alias for backwards compatibility but somehow it does not
    ;; work, so I just define it myself
    (defalias 'sp--syntax-class-to-char 'syntax-class-to-char)

    (require 'smartparens-config)

    (bind-keys :map smartparens-mode-map
      ("C-M-f" . sp-forward-sexp)
      ("C-M-b" . sp-backward-sexp)
      ("C-M-n" . sp-down-sexp)
      ("C-M-S-n" . sp-backward-down-sexp)
      ("C-M-p" . sp-up-sexp)
      ("C-M-S-p" . sp-backward-up-sexp)
      ("C-M-a" . sp-beginning-of-sexp)
      ("C-M-e" . sp-end-of-sexp)
      ("C-M-k" . sp-kill-sexp)
      ("C-M-t" . sp-transpose-sexp))

    (smartparens-global-mode t)
    (smartparens-strict-mode t)
    (show-smartparens-global-mode t)

    ;; We write it the verbose way instead of with sp-with-modes because
    ;; use-package does not properly expand the macro somehow during compilation
    (sp-local-pair sp--html-modes "{{" "}}")
    (sp-local-pair sp--html-modes "{%" "%}")
    (sp-local-pair sp--html-modes "{#" "#}")

    :chords (("fd" . hydra-smartparens/body)))
#+END_SRC

** Region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :straight t
    :bind (("M-m" . er/expand-region)
           ("M-M" . er/contract-region))
    :config
    (with-eval-after-load 'latex-mode
      (require 'latex-mode-expansions)))
#+END_SRC

** Replacing

Gives you a visual preview at the point of replacement.

#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :straight t
    :bind (("C-c r" . vr/replace)
           ("C-c R" . vr/query-replace)))
#+END_SRC

** Navigation

Quickly move to every word and character on screen.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :straight t
    :init
    (require 'hydra)
    (defhydra hydra-avy (:exit t :hint nil)
      "
   Line^^       Region^^        Goto
  ----------------------------------------------------------
   [_y_] yank   [_Y_] yank      [_c_] timed char  [_C_] char
   [_m_] move   [_M_] move      [_w_] word        [_W_] any word
   [_k_] kill   [_K_] kill      [_l_] line        [_L_] end of line"
      ("c" avy-goto-char-timer)
      ("C" avy-goto-char)
      ("w" avy-goto-word-1)
      ("W" avy-goto-word-0)
      ("l" avy-goto-line)
      ("L" avy-goto-end-of-line)
      ("m" avy-move-line)
      ("M" avy-move-region)
      ("k" avy-kill-whole-line)
      ("K" avy-kill-region)
      ("y" avy-copy-line)
      ("Y" avy-copy-region))
    :config
    (setq avy-timeout-seconds 0.25)

    :bind (("M-s" . avy-goto-char-timer)
           ("C-c a" . hydra-avy/body)))
#+END_SRC

Use smart beginning and end moves instead of just ~point-min~ and ~point-max~.

#+BEGIN_SRC emacs-lisp
  (use-package beginend
    :straight t
    :config
    (beginend-global-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package smartscan
    :straight (smartscan :repo "martenlienen/smart-scan" :branch "no-message" :host github)
    :hook (prog-mode . smartscan-mode)
    :custom
    ;; Look for symbols instead of words so that it works with UTF-8 identifiers
    (smartscan-symbol-selector "symbol"))
#+END_SRC

** Undo

Undoing can be quite tricky to keep track of mentally in emacs because the undo list also
records undos. `vundo` presents the undo list as a tree structure.

#+BEGIN_SRC emacs-lisp
  (use-package vundo
    :straight t
    :custom ((vundo-compact-display t))
    :bind (("C-c C-/" . vundo)))
#+END_SRC

Use two keys for the usual, linear undo instead of emacs' one-key-to-rule-them-all default.

#+BEGIN_SRC emacs-lisp
  (use-package undo-fu
    :straight t
    :bind (("C-/" . #'undo-fu-only-undo)
           ("M-/" . #'undo-fu-only-redo)))
#+END_SRC

** Formatting

#+BEGIN_SRC emacs-lisp
  (use-package apheleia
    :straight t
    :config
    (setf (alist-get 'python-mode apheleia-mode-alist) '(ruff ruff-isort)
          (alist-get 'python-ts-mode apheleia-mode-alist) '(ruff ruff-isort)
          (alist-get 'latexindent apheleia-formatters) '("latexindent" "--logfile=/dev/null" "--local"))

    (apheleia-global-mode t))
#+END_SRC

** White Space

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :straight (ws-butler :repo "hlissner/ws-butler" :host github)
    :custom ((ws-butler-keep-whitespace-before-point nil))
    :config
    (add-to-list 'ws-butler-global-exempt-modes 'snippet-mode)

    (ws-butler-global-mode))
#+END_SRC

* Code Intelligence

** Tree Sitter

#+BEGIN_SRC emacs-lisp
  (use-package treesit-auto
    :straight t
    :if (version<= "29" emacs-version)
    :custom ((treesit-auto-install 'prompt))
    :config
    (global-treesit-auto-mode))
#+END_SRC

** Language Server Protocol (LSP)

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :straight t
    :custom ((lsp-auto-guess-root t)
             (lsp-auto-configure t)
             (lsp-signature-doc-lines 1)
             (lsp-keymap-prefix nil)
             (lsp-disabled-clients '(ruff)))
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp)
    :bind (("C-?" . lsp-describe-thing-at-point)
           ;; Extra binding for terminal UI
           ("C-c ?" . lsp-describe-thing-at-point)
           ("<f10>" . lsp-rename)
           ("S-<f10>" . lsp-execute-code-action)
           :map lsp-mode-map
           ("C-S-SPC" . nil)))

  (use-package lsp-treemacs :straight t)
  (use-package lsp-headerline
    :after lsp-mode
    :custom ((lsp-headerline-breadcrumb-enable-diagnostics nil)
             (lsp-headerline-arrow
              (propertize ">" 'face 'lsp-headerline-breadcrumb-separator-face))))

  (defun ml/pylsp-get-pixi-environment ()
    "Get the pixi/conda environment for the current workspace.

  <ENV>/bin/python is the corresponding Python executable."
    (getenv "CONDA_PREFIX"))

  (use-package lsp-pylsp
    :after lsp-mode
    :custom ((lsp-pylsp-plugins-jedi-completion-fuzzy nil)
             (lsp-pylsp-plugins-jedi-completion-include-params nil)
             (lsp-pylsp-plugins-jedi-completion-include-class-objects nil)
             (lsp-pylsp-plugins-flake8-enabled nil)
             (lsp-pylsp-plugins-mccabe-enabled nil)
             (lsp-pylsp-plugins-ruff-enabled t)
             (lsp-pylsp-plugins-ruff-unsafe-fixes t))
    :config
    (advice-add 'lsp-pylsp-get-pyenv-environment :override #'ml/pylsp-get-pixi-environment))

  (use-package lsp-ui
    :straight t
    :custom ((lsp-ui-peek-show-directory nil)
             (lsp-ui-sideline-enable nil)
             (lsp-ui-doc-enable nil))
    :bind (("M-=" . lsp-ui-peek-find-references)
           :map lsp-ui-mode-map
           ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
           ([remap xref-find-references] . lsp-ui-peek-find-references)))
#+END_SRC

** Auto-Completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :bind (("C-M-SPC" . company-complete)
           :map company-active-map
           ("<tab>" . nil))
    :init
    (setf company-idle-delay 0
          company-minimum-prefix-length 2
          company-show-quick-access t
          company-selection-wrap-around t
          company-backends (list #'company-capf
                                 (list #'company-dabbrev-code
                                       #'company-keywords)
                                 #'company-files
                                 #'company-dabbrev)
          company-global-modes (list 'not 'org-mode))
    :config
    (global-company-mode t))

  (use-package company-dabbrev
    :straight company
    :init
    (setf company-dabbrev-ignore-case 'keep-prefix
          company-dabbrev-ignore-invisible t
          company-dabbrev-downcase nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package copilot
    :straight (copilot :repo "zerolfx/copilot.el" :files ("dist" "*.el") :host github)
    :demand t
    :bind (:map prog-mode-map
                ("<tab>" . ml/copilot-accept-or-indent))
    :config
    (defun ml/copilot-accept-or-indent ()
      (interactive)
      (cond
       ((and (bound-and-true-p copilot-mode) (copilot--overlay-visible))
        (call-interactively #'copilot-accept-completion))
       ((yas-active-snippets)
        (call-interactively #'yas-next-field))
       (t (call-interactively #'indent-for-tab-command))))

    (add-hook 'prog-mode-hook 'copilot-mode))
#+END_SRC

** Complete from elsewhere

#+BEGIN_SRC emacs-lisp
  (use-package hippie-exp
    :bind ("C-z" . hippie-expand)
    :init
    (setf hippie-expand-try-functions-list
          '(try-expand-dabbrev-visible
            try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-line
            try-complete-lisp-symbol)))
#+END_SRC

** Snippets

#+BEGIN_SRC emacs-lisp
  (defun isnip-beginning-of-line-p ()
    "Is point at the beginning of a line semantically?"
    (save-excursion
      ;; Skip over the key of the triggering template
      (backward-word)
      (skip-chars-backward " \t")
      (or (= (point) (point-min)) (char-equal (char-before) ?\n))))

  (defvar ml-treesit-not-string-or-comment-condition
    (lambda ()
      (if (s-ends-with-p "-ts-mode" (symbol-name major-mode))
          (let* ((node (treesit-node-at (point)))
                 (type (treesit-node-type node)))
            (message "Node type: %s %s" node type)
            ;; Allow expansion in front of a string (string_start)
            (if (or (s-equals-p type "string") (s-equals-p type "string_end")
                    (and (s-equals-p type "comment")
                         ;; Allow expansion in front of a comment
                         (< (treesit-node-start node) (point))
                         (<= (point) (treesit-node-end node))))
                '(require-snippet-condition . force-in-comment)
              t))
        (funcall yas-not-string-or-comment-condition)))
    "Return non-nil if point is not in a string or comment (as determined by tree-sitter).")

  (use-package yasnippet
    :straight t
    :demand t
    :bind (:map yas-minor-mode-map
                ("<tab>" . nil)
                ("TAB" . nil))
    :config
    (setq-default yas-buffer-local-condition ml-treesit-not-string-or-comment-condition)

    ;; Don't append newlines to snippet files
    (add-hook 'snippet-mode-hook (lambda () (setq require-final-newline nil)))

    ;; `yas-maybe-expand' is not a function, so we cannot use :bind or bind-key and need to
    ;; load yasnippet eagerly
    (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)
    ;; Bind SPC globally because otherwise the fallthrough in `yas-maybe-expand` does not
    ;; work
    (define-key global-map (kbd "SPC") #'self-insert-command)

    ;; Circumvent snippet expansion with shift
    (define-key global-map (kbd "S-SPC") (lambda () (interactive) (insert " ")))

    (yas-global-mode t))
#+END_SRC

** ChatGPT

#+BEGIN_SRC emacs-lisp
  (defun ml-create-or-edit-directive ()
    "Create or edit one of my LLM directives."
    (interactive)
    (let ((directory "~/.emacs.d/directives/")
          (file (read-file-name "Choose LLM Directive file: " "~/.emacs.d/directives/")))
      (unless (file-directory-p directory)
        (make-directory directory t))
      (find-file file)
      (add-hook 'after-save-hook #'ml/gptel-reload-directives nil 'local)))

  (defhydra gptel-hydra (:hint nil :exit t)
    ("g" gptel "gptel")
    ("m" gptel-menu "Menu")
    ("s" gptel-send "Send")
    ("a" gptel-add "Add context")
    ("f" gptel-add-file "Add file")
    ("r" gptel-rewrite "Rewrite/Refactor")
    ("d" ml-create-or-edit-directive "Edit directives")
    ("A" gptel-abort "Abort"))

  (use-package gptel
    :straight t
    :commands (gptel gptel-send)
    :custom ((gptel-default-mode #'org-mode)
             (gptel-prompt-prefix-alist '((org-mode . "*Prompt*: ")
                                          (markdown-mode . "**Prompt**: ")
                                          (text-mode . "Prompt: ")))
             (gptel-response-prefix-alist '((org-mode . "*Response*: ")
                                            (markdown-mode . "**Response**: ")
                                            (text-mode . "Response: ")))
             (gptel-model 'gpt-4o)
             (gptel-track-media t))
    :hook ((gptel-mode . visual-line-mode)
           (org-mode . ml/maybe-enable-gptel-mode))
    :bind (("C-c g" . gptel-hydra/body)
           :map gptel-mode-map
           ("C-c T" . gptel-set-topic))
    :config
    ;; Register claude backend
    (gptel-make-anthropic "Claude" :stream t :key #'gptel-api-key-from-auth-source)
    (gptel-make-gemini "Gemini" :stream t :key #'gptel-api-key-from-auth-source)

    (defun ml/gptel-reload-directives ()
      "Reload my custom directives from disk."
      (interactive)
      (cl-loop for file in (directory-files "~/.emacs.d/directives" t "\\.txt\\'")
               for filename = (intern (file-name-sans-extension (file-name-nondirectory file)))
               ;; Replace newlines with spaces, because org-mode does not support newlines
               ;; in properties.
               for file-contents = (s-replace "\n" " " (f-read-text file))
               do (if-let ((pair (assoc filename gptel-directives)))
                      (setf (cdr pair) file-contents)
                    (push (cons filename file-contents) gptel-directives))))

    (ml/gptel-reload-directives)

    (defun ml/maybe-enable-gptel-mode ()
      "Enable gptel-mode if the current buffer has any GPTEL_* org property."
      (when (seq-some (lambda (prop) (string-prefix-p "GPTEL_" prop))
                      (org-buffer-property-keys))
        (gptel-mode))))
#+END_SRC

* Integrations

** git

#+BEGIN_SRC emacs-lisp
  ;; Stop asking me all the time when I visit a source file from a package built with
  ;; straight.el (they symlink the .el files from the package repositories)
  (setq vc-follow-symlinks t)

  (use-package git-timemachine
    :straight (git-timemachine :host nil
                               :repo "https://codeberg.org/pidu/git-timemachine.git"))

  (use-package magit
    :straight t
    :after git-timemachine
    :bind (("<f2>" . magit-status)
           ("<f5>" . magit-file-dispatch))
    :custom
    (magit-display-buffer-function #'display-buffer)
    :init
    (setq magit-last-seen-setup-instructions "1.4.0"
          magit-commit-ask-to-stage nil
          magit-push-always-verify nil
          magit-no-confirm '(set-and-push amend-published rebase-published)
          magit-repolist-columns
          '(("Name"    25 magit-repolist-column-ident ())
            ("Version" 25 magit-repolist-column-version ())
            ("D"        1 magit-repolist-column-dirty ())
            ("⇣"      3 magit-repolist-column-unpulled-from-upstream
             ((:right-align t)
              (:help-echo "Upstream changes not in branch")))
            ("⇡"        3 magit-repolist-column-unpushed-to-upstream
             ((:right-align t)
              (:help-echo "Local changes not in upstream")))
            ("Path"    99 magit-repolist-column-path ()))
          magit-repository-directories
          '(("~/.dotfiles" . 1) ("~/src" . 2)))

    :config
    (transient-append-suffix 'magit-file-dispatch "t" (list 1 "T" "Timemachine" #'git-timemachine)))
#+END_SRC

** dict.cc

#+BEGIN_SRC emacs-lisp
  (use-package dictcc
    :straight t
    :bind ("C-c d" . dictcc))
#+END_SRC

** google

#+BEGIN_SRC emacs-lisp
  (defun ml/google-search-region (query)
    "Search QUERY on google."
    (interactive
     (list (cond ((use-region-p)
                  (buffer-substring-no-properties (region-beginning) (region-end)))
                 (current-prefix-arg (read-string "Google: "))
                 (t (buffer-substring-no-properties (line-beginning-position)
                                                    (line-end-position))))))
    (browse-url (concat "https://www.google.com/search?q=" (url-hexify-string query))))

  (global-set-key (kbd "C-c G") 'ml/google-search-region)
#+END_SRC

** Debugging

#+BEGIN_SRC emacs-lisp
  (use-package realgud
    :straight t
    :defer t)
#+END_SRC

* Writing

Put emacs into distraction-free writing mode on demand.

#+BEGIN_SRC emacs-lisp
  (use-package darkroom
    :straight (darkroom :repo "joaotavora/darkroom" :host github)
    :bind (("<f7>" . #'darkroom-mode))

    :config
    (setq darkroom-text-scale-increase 1.5))

  (use-package focus
    :straight t
    :bind (("S-<f7>" . #'focus-mode)))
#+END_SRC

** Linting

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :straight t
    :config
    (setq flycheck-textlint-config ".config/textlintrc.yml")
    (add-to-list 'flycheck-textlint-plugin-alist '(tex-mode . "latex2e"))
    (add-to-list 'flycheck-textlint-plugin-alist '(rst-mode . "rst"))

    (add-hook 'markdown-mode-hook #'flycheck-mode))
#+END_SRC

* Programming Languages

** All Text

#+BEGIN_SRC emacs-lisp
  (use-package text-mode
    :hook (text-mode . visual-line-mode))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (defun ml-python-statement-at-point ()
    "Find the statement at point."
    (let* ((statement-types '(future_import_statement
                              import_statement
                              import_from_statement
                              print_statement
                              assert_statement
                              expression_statement
                              return_statement
                              delete_statement
                              raise_statement
                              pass_statement
                              break_statement
                              continue_statement
                              global_statement
                              nonlocal_statement
                              exec_statement))
           (this (treesit-node-at (point)))
           result)
      (cl-loop until (or (not this) (seq-contains-p statement-types (tsc-node-type this)))
               do (setq this (treesit-node-parent this)))
      this))

  (defun ml-python-shell-send-statement ()
    "Send the statement surrounding point to inferior python process."
    (interactive)
    (when-let ((stmt (ml-python-statement-at-point)))
      (let ((code (buffer-substring-no-properties (tsc-node-start-position stmt)
                                                  (tsc-node-end-position stmt))))
        (python-shell-send-string code))))

  (defun ml-python-shell-send-variable ()
    "Send the python expression at point."
    (interactive)
    (save-excursion
      (let (start end)
        (skip-chars-backward "[:alnum:].")
        (setq start (point))
        (skip-chars-forward "[:alnum:].")
        (setq end (point))
        (let ((var (buffer-substring start end)))
          (python-shell-send-string (format "print('%s'); print(%s)" var var))))))

  (require 'cl-lib)

  (defvar ml-python-last-command nil
    "Stores the last sent region for resending.")

  (defun ml-python-shell-send-region ()
    "Send the current region to inferior python process stripping indentation."
    (interactive)
    (let* ((start (save-excursion
                    (goto-char (region-beginning))
                    (beginning-of-line)
                    (point)))
           (end (save-excursion
                  (goto-char (region-end))
                  (end-of-line)
                  (point)))
           (region (buffer-substring start end))
           (command))
      ;; Strip indentation
      (with-temp-buffer
        (insert region)

        ;; Clear leading empty lines
        (goto-char (point-min))
        (while (char-equal (following-char) ?\n)
          (delete-char 1))

        ;; Remove indentation from all non-empty lines
        (let ((indent (save-excursion
                        (back-to-indentation)
                        (- (point) (point-min)))))
          (cl-loop until (eobp)
                   do
                   ;; Make sure that we do not delete empty lines or lines with
                   ;; only spaces but fewer than indent
                   (cl-loop repeat indent
                            while (char-equal (following-char) ?\s)
                            do (delete-char 1))
                   (forward-line 1)))
        (setq command (buffer-string)))
      (setq ml-python-last-command command)
      (python-shell-send-string command)))

  (defun ml-python-shell-resend-last-command ()
    "Resend the last command to the inferior python process."
    (interactive)
    (when ml-python-last-command
      (python-shell-send-string ml-python-last-command)))

  (defun ml-python-shell-send-region-dwim ()
    "Send active region or resend last region."
    (interactive)
    (if (use-region-p)
        (ml-python-shell-send-region)
      (ml-python-shell-resend-last-command)))

  (defun ml-imports-start ()
    "Find the start position for the imports in the current buffer."
    (save-excursion
      (goto-char 0)
      (if-let (import-end (re-search-forward "^[[:space:]]*\\(import\\|from\\)" nil t))
          (- (point) 6)
        (goto-char 0)
        (if (looking-at-p "#!")
            (progn
              ;; Skip shebang line and optionally one empty line
              (forward-line)
              (if (looking-at-p "\n") (forward-line))
              (beginning-of-line)
              (point))
          (point)))))

  (defun ml-python-import ()
    "Insert and edit a new `import' statement."
    (interactive)
    (save-window-excursion
      (save-excursion
        (goto-char (ml-imports-start))
        (insert "import \n")
        (backward-char)
        (recursive-edit))))

  (defun ml-python-from-import ()
    "Insert and edit a new `from .. import' statement."
    (interactive)
    (save-window-excursion
      (save-excursion
        (goto-char (ml-imports-start))
        (insert "fi \n")
        (backward-char 2)
        (yas-expand)
        (recursive-edit))))

  (defun ml-python-set-fill-column ()
    "Use fill-column 88 as is the default in black."
    (setq fill-column 88))

  (use-package python
    :bind (:map python-ts-mode-map
                ("C-c D" . #'realgud:pdb)
                ("C-c C-l" . #'ml-python-shell-send-statement)
                ("C-c C-r" . #'ml-python-shell-send-region-dwim)
                ("C-c C-v" . #'ml-python-shell-send-variable)
                ("C-c t" . #'python-pytest-dispatch)
                ("C-c i" . #'ml-python-import)
                ("C-c I" . #'ml-python-from-import)
                ("C-c <left>" . #'python-indent-shift-left)
                ("C-c <right>" . #'python-indent-shift-right))

    :config
    (when (executable-find "ipython")
      (setq python-shell-interpreter "ipython"
            ;; Disable ipython 5 features that are incompatible with
            ;; inferior-python
            python-shell-interpreter-args "--simple-prompt")
      (push "ipython" python-shell-completion-native-disabled-interpreters))

    (setq python-fill-docstring-style 'pep-257-nn)

    (add-hook 'python-base-mode-hook #'eldoc-mode)
    (add-hook 'python-base-mode-hook #'subword-mode)
    (add-hook 'python-base-mode-hook #'python-docstring-mode)
    (add-hook 'python-base-mode-hook #'ml-python-set-fill-column)

    (add-hook 'python-base-mode-hook #'lsp))

  (use-package python-pytest
    :straight t
    :bind (:map python-pytest-mode-map
                ("q" . #'bury-buffer)))

  (use-package python-docstring
    :straight t
    :config
    (setq python-docstring-sentence-end-double-space nil))

  (use-package pip-requirements :straight t)
#+END_SRC

** Julia

#+BEGIN_SRC emacs-lisp
  (defun ml-vterm-backward-kill-word ()
    "Kill previous word in vterm."
    (interactive)
    (vterm-send-key (kbd "C-w")))

  (use-package vterm
    :straight t
    :custom
    (vterm-max-scrollback 100000)
    :custom-face
    (vterm-color-black ((t . (:foreground "#2E3440" :background "#7B8394"))))
    (vterm-color-red ((t . (:foreground "#BF616A" :background "#D08770"))))
    (vterm-color-green ((t . (:foreground "#A3BE8C" :background "#434C5E"))))
    (vterm-color-yellow ((t . (:foreground "#EBCB8B" :background "#7B8394"))))
    (vterm-color-blue ((t . (:foreground "#81A1C1" :background "#D8DEE9"))))
    (vterm-color-magenta ((t . (:foreground "#5E81AC" :background "#B48EAD"))))
    (vterm-color-cyan ((t . (:foreground "#88C0D0" :background "#E5E9F0"))))
    (vterm-color-white ((t . (:foreground "#E5E9F0" :background "#ECEFF4"))))
    :bind (:map vterm-mode-map
                ("<C-backspace>" . ml-vterm-backward-kill-word)
                ("M-i" . nil)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package julia-mode :straight t)

  (defun ml-julia-repl-with-sysimage ()
    "Start a julia REPL with a sysimage in the project root."
    (interactive)
    (let* ((project-root (locate-dominating-file (buffer-file-name) "Project.toml"))
           (sysimage (if project-root (f-join project-root "sysimage.so")))
           (julia-repl-switches (when (and sysimage (f-exists-p sysimage))
                                  (concat "--sysimage " sysimage))))
      (julia-repl)))

  (use-package julia-repl
    :straight t
    :hook ((julia-mode . julia-repl-mode))
    :bind (:map julia-repl-mode-map
           ("C-c C-z" . ml-julia-repl-with-sysimage))
    :config
    (julia-repl-set-terminal-backend 'vterm)

    (add-to-list 'julia-repl-captures (kbd "M-i")))
#+END_SRC

** Emacs Lisp

#+BEGIN_SRC emacs-lisp
  (defun ml-run-all-ert-tests ()
    "Run all ert tests defined."
    (interactive)
    (ert t))

  (use-package macrostep :straight t)

  (use-package lisp-mode
    :config
    (bind-key "C-h C-f" 'find-function emacs-lisp-mode-map)
    (bind-key "C-c e t" 'ml-run-all-ert-tests emacs-lisp-mode-map)
    (bind-key "C-c e b" 'eval-buffer emacs-lisp-mode-map)
    (bind-key "C-c e m" 'macrostep-expand emacs-lisp-mode-map)

    (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
    (with-eval-after-load 'smartparens
      (add-hook 'emacs-lisp-mode-hook 'smartparens-strict-mode))
    (with-eval-after-load 'flycheck
      (add-hook 'emacs-lisp-mode-hook 'flycheck-mode)))
#+END_SRC

** Shell

#+BEGIN_SRC emacs-lisp
  (use-package sh-script
    :mode ("PKGBUILD\\'" . sh-mode)
    :config  (setq-default sh-basic-offset 2))
#+END_SRC

** Justfile

#+BEGIN_SRC emacs-lisp
  (use-package just-mode
    :straight t
    :custom ((just-indent-offset 2)))
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
  (use-package cargo :straight t)

  (use-package rust-mode
    :straight t
    :hook
    (rust-mode . cargo-minor-mode)
    (rust-mode . lsp)
    (rust-mode . flycheck-mode))

  (use-package flycheck
    :straight t)

  (use-package  flycheck-rust
    :straight t
    :hook (flycheck-mode . flycheck-rust-setup))
#+END_SRC

** lua

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode :straight t)
#+END_SRC

** COMMENT C/C++

#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :mode ("\\.h\\'" . c++-mode)
    :init
    (defun ml-c-append-semicolon ()
      "Insert semicolon at the end of the line."
      (interactive)
      (save-excursion
        (move-end-of-line nil)
        (insert ";")))
    :bind (:map c-mode-base-map
                ("<C-return>" . #'ml-c-append-semicolon)
                ("C-c C-c" . #'recompile)
                ("C-c C-o" . #'ff-find-other-file)
                ("C-c f" . #'clang-format-buffer))
    :config
    (add-hook 'c++-mode-hook #'subword-mode)
    (add-hook 'c++-mode-hook #'eglot-ensure))
#+END_SRC

*** Style Guide

#+BEGIN_SRC emacs-lisp
  (use-package google-c-style
    :straight t
    :demand t
    :config
    (add-hook 'c-mode-common-hook #'google-set-c-style))
#+END_SRC

*** Build Tools

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode :straight t)
#+END_SRC

** COMMENT javascript

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :straight t
    :mode (("\\.js\\'" . js2-mode) ("\\.jsx\\'" . js2-mode))
    :interpreter "node"
    :config
    (require 'js2-refactor)

    (setq-default js2-basic-offset 2)
    (setf js2-highlight-level 3
          js2-include-node-externs t)

    (js2r-add-keybindings-with-prefix "C-c r")

    (add-hook 'js2-mode-hook 'subword-mode))
#+END_SRC

* Text Formats

** LaTeX

LaTeX tables are really horrible to create and edit for most simple
use-cases. But ~org-mode~ comes to our rescue. Simply enabling ~org-table-mode~
gives you automatically resizing ASCII tables everywhere and you can even export
them to LaTeX!

#+BEGIN_SRC emacs-lisp
  (defun enable-word-wrap ()
    "Enable word wrapping."
    (interactive)
    ;; Disable line wrap fringe indicators
    (make-variable-buffer-local 'fringe-indicator-alist)
    (setf (alist-get 'continuation fringe-indicator-alist) nil)
    (setq word-wrap t))

  (defun ml/latex-narrow-to-section ()
    "Narrow to the current LaTeX section including its subsections."
    (interactive)
    (let ((section-start
           (save-excursion
             (if (re-search-backward "\\\\section\\b" nil t)
                 (point) (error "No section start found"))))
          (section-end
           (save-excursion
             (if (re-search-forward "\\\\section\\b" nil t)
                 (match-beginning 0) (point-max)))))
      (narrow-to-region section-start section-end)))

  (use-package tex-mode
    :straight auctex
    :mode ("\\.tex\\'" . LaTeX-mode)
    :custom ((TeX-auto-save t)
             (TeX-parse-self t)
             (TeX-save-query nil)
             (prettify-symbols-unprettify-at-point 'right-edge)
             (TeX-error-overview-open-after-TeX-run t))
    :hook ((LaTeX-mode . TeX-source-correlate-mode)
           (LaTeX-mode . TeX-PDF-mode)
           (LaTeX-mode . prettify-symbols-mode)
           (LaTeX-mode . reftex-mode)
           (LaTeX-mode . flycheck-mode)
           (LaTeX-mode . enable-word-wrap)
           (LaTeX-mode . ml-latex-bold-tensors))
    :bind (:map TeX-mode-map
                ("C-x n s" . #'ml/latex-narrow-to-section))
    :init
    (defun ml-latex-bold-tensors ()
      ;; Display vector and matrix symbols in bold
      (font-lock-add-keywords
       nil
       `((,(rx (seq
                (group (seq "\\"
                            (or "vzero"
                                (seq (any "vm") (any "a-z"))
                                (seq "m" (any "A-Z"))
                                (seq "v" (or "alpha" "beta" "gamma" "delta" "epsilon" "zeta"
                                             "eta" "theta" "iota" "kappa" "lambda" "mu" "nu"
                                             "xi" "omicron" "pi" "rho" "sigma" "tau" "upsilon"
                                             "phi" "chi" "psi" "omega"))
                                (seq "m" (or "Gamma" "Delta" "Lambda" "Phi" "Pi" "Psi" "Sigma"
                                             "Theta" "Upsilon" "Xi" "Omega")))))
                (or (not (in "a-z" "A-Z")) word-end)))
          1 'bold))))
    :config
    ;; Workaround for smartparens overwriting `
    (require 'smartparens-latex)

    (setq tex--prettify-symbols-alist
          (append tex--prettify-symbols-alist
                  '(("\\R" . ?ℝ))
                  ;; Add symbols for the common vector and matrix notation from
                  ;; math_commands.tex
                  '(("\\vzero" . ?0)
                    ("\\valpha" . ?α)
                    ("\\vbeta" . ?β)
                    ("\\vgamma" . ?γ)
                    ("\\vdelta" . ?δ)
                    ("\\vepsilon" . ?ϵ)
                    ("\\vzeta" . ?ζ)
                    ("\\veta" . ?η)
                    ("\\vtheta" . ?θ)
                    ("\\viota" . ?ι)
                    ("\\vkappa" . ?κ)
                    ("\\vlambda" . ?λ)
                    ("\\vmu" . ?μ)
                    ("\\vnu" . ?ν)
                    ("\\vxi" . ?ξ)
                    ;; There is no \omicron because it looks like a latin o.
                    ("\\vpi" . ?π)
                    ("\\vrho" . ?ρ)
                    ("\\vsigma" . ?σ)
                    ("\\vtau" . ?τ)
                    ("\\vupsilon" . ?υ)
                    ("\\vphi" . ?ϕ)
                    ("\\vchi" . ?χ)
                    ("\\vpsi" . ?ψ)
                    ("\\vomega" . ?ω)
                    ;; Uppercase Greek letters.
                    ("\\mGamma" . ?Γ)
                    ("\\mDelta" . ?Δ)
                    ("\\mLambda" . ?Λ)
                    ("\\mPhi" . ?Φ)
                    ("\\mPi" . ?Π)
                    ("\\mPsi" . ?Ψ)
                    ("\\mSigma" . ?Σ)
                    ("\\mTheta" . ?Θ)
                    ("\\mUpsilon" . ?Υ)
                    ("\\mXi" . ?Ξ)
                    ("\\mOmega" . ?Ω))
                  (cl-loop for c from ?a to ?z
                           collect (cons (format "\\v%c" c) (char-to-string c)))
                  (cl-loop for c from ?A to ?Z
                           collect (cons (format "\\m%c" c) (char-to-string c))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defvar ml-preview-scale 1.35)

  (defun ml-preview-scale-up ()
    "Scale up previews."
    (* ml-preview-scale (funcall (preview-scale-from-face))))

  (use-package reftex
    :custom ((reftex-toc-follow-mode t)
             (reftex-cite-format 'natbib)))

  (defun ml/consult-bibtex-local ()
    "Insert a citation from the document-local bibtex."
    (interactive)
    (let ((macro (and (require 'reftex-parse nil t)
                      (setq macro (reftex-what-macro 1)))))
      (when (or (not macro)
                (not (stringp (car macro)))
                (not (string-match "\\`\\\\cite\\|cite\\'" (car macro))))
        ;; We are not in a \cite command, so insert \citep by default
        (insert "\\citep{}")
        (backward-char)))
    (let ((bibtex-completion-bibliography (bibtex-completion-find-local-bibliography)))
      (call-interactively #'consult-bibtex)))

  (use-package consult-bibtex
    :after latex
    :straight '(consult-bibtex :repo "mohkale/consult-bibtex" :host github)
    :custom ((bibtex-completion-cite-prompt-for-optional-arguments nil))
    :bind (:map LaTeX-mode-map ("C-c c" . #'ml/consult-bibtex-local)))

  (use-package preview
    :after latex
    :custom ((preview-scale-function #'ml-preview-scale-up)
             (preview-auto-cache-preamble t))
    :pretty-hydra
    ((:quit-key "g" :title "preview" :color blue)
     ("preview"
      (("p" preview-at-point "at point")
       ("d" preview-document "document")
       ("b" preview-buffer "buffer")
       ("s" preview-section "section")
       ("r" preview-region "region")
       ("e" preview-environment "environment"))
      "clear"
      (("P" preview-clearout-at-point "at point")
       ("D" preview-clearout-document "document")
       ("B" preview-clearout-buffer "buffer")
       ("S" preview-clearout-section "section")
       ("R" preview-clearout "region"))
      "cache"
      (("c" preview-cache-preamble "refresh preamble"))))
    :bind (:map LaTeX-mode-map ("C-c p" . preview-hydra/body)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package cdlatex
    :straight t
    :after latex
    :hook (LaTeX-mode . cdlatex-mode)
    :custom ((cdlatex-make-sub-superscript-roman-if-pressed-twice t)
             (cdlatex-auto-help-delay 0.5))
    :bind (:map cdlatex-mode-map
                ("(" . nil)
                ("<" . nil)
                ("[" . nil)
                ("{" . nil)
                ("|" . nil)))
#+END_SRC

** Typst

#+BEGIN_SRC emacs-lisp
  (use-package typst-ts-mode
    :straight (typst-ts-mode :repo "meow_king/typst-ts-mode" :host codeberg))
#+END_SRC

** markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :straight t)
#+END_SRC

** reStructuredText

#+BEGIN_SRC emacs-lisp
  (defun ml-length-of-line ()
    "Return length of the current line."
    (save-excursion
      (- (progn (end-of-line) (point))
         (progn (beginning-of-line) (point)))))

  (defun ml-underline ()
    "Repeat the character at point until it stretches the length of
    the previous line."
    (interactive)
    (let* ((char (preceding-char))
           (prev-length (save-excursion
                          (forward-line -1)
                          (ml-length-of-line)))
           (curr-length (save-excursion
                          (ml-length-of-line)))
           (repeat-length (max 0 (- prev-length curr-length))))
      (insert (s-repeat repeat-length (char-to-string char)))))

  (use-package rst
    :straight t
    :config
    (bind-key "<C-right>" #'ml-underline rst-mode-map)

    (add-hook 'rst-mode-hook #'flycheck-mode))
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode :straight t)
#+END_SRC

** HTML/jinja2

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :straight t
    :mode
    ("\\.phtml\\'" "\\.php\\'" "\\.tpl\\'" "\\.[agj]sp\\'" "\\.as[cp]x\\'" "\\.erb\\'" "\\.mustache\\'" "\\.djhtml\\'" "\\.ejs\\'")
    :config
    ;; Disable inserting closing parens etc. because we have smartparens already
    (setq web-mode-enable-auto-pairing nil))
#+END_SRC

* Package Footer

#+BEGIN_SRC emacs-lisp

  (provide 'ml-init)
  ;;; ml-init.el ends here
#+END_SRC
